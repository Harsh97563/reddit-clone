// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  verified Boolean @default(false)
  verificationCode Int @default(0)
  profileImgSrc String?
  followers Int[] @default([])
  following Int[] @default([])
  posts Post[] 
  comments Comments[]
  votes Vote[]
  
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  imageSrc String?
  votes Int @default(0)
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  comments Comments[]
  voteRecords Vote[]
}

model Vote {
  id Int @id @default(autoincrement())
  type VoteType
  user User @relation(fields: [userId], references: [id])
  userId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int
  @@unique([userId, postId])
}

enum VoteType{
  UPVOTE
  DOWNVOTE
}

model Comments {
  id Int @id @default(autoincrement())
  comment String
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  postId Int
  post Post @relation(fields: [postId], references: [id])
}
